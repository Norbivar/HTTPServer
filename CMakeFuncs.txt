function(RERUN_CONAN_INSTALL VAR_CONAN_PROFILE VAR_BUILD_TYPE VAR_CONAN_OUTPUT_DIR)
	
	set(TOOLCHAIN_USED "")
	if(DEFINED CMAKE_TOOLCHAIN_FILE)
		set (TOOLCHAIN_USED "-c" "tools.cmake.cmaketoolchain:user_toolchain=['${CMAKE_TOOLCHAIN_FILE}']")
	endif()

	set(CONAN_INSTALL_COMMAND "conan")
	set(CONAN_INSTALL_PARAMS 
		"install" 
		"-c" "tools.cmake.cmaketoolchain:generator=${CMAKE_GENERATOR}"
		${TOOLCHAIN_USED}
		"-s" "build_type=${VAR_BUILD_TYPE}"
		"-pr:h" "./${VAR_CONAN_PROFILE}"
		"--output-folder=${VAR_CONAN_OUTPUT_DIR}"
		"--build=missing"
		".")

	string(REPLACE ";" " " CONAN_INSTALL_PARAMS_STRING "${CONAN_INSTALL_PARAMS}")
	message(STATUS "Running Conan command: ${CONAN_INSTALL_COMMAND} ${CONAN_INSTALL_PARAMS_STRING}")
	execute_process(COMMAND ${CONAN_INSTALL_COMMAND} ${CONAN_INSTALL_PARAMS}
					WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
					RESULT_VARIABLE CONAN_INSTALL_RESULT
					OUTPUT_STRIP_TRAILING_WHITESPACE)

	if(${CONAN_INSTALL_RESULT} EQUAL 1)
		message(FATAL_ERROR "Error while handling Conan, stopping build!")
	endif()
endfunction()

#################################

function(SET_PROJECT_EXTENSION_AND_FLAGS VAR_PROJECT)
	# Set the binary extension
	set(BINARY_SUFFIX "")

	set_property(TARGET ${VAR_PROJECT} PROPERTY CXX_STANDARD 20)
	if(UNIX)
		target_link_libraries(${VAR_PROJECT} pthread)
		set(BINARY_SUFFIX ".out")
		target_compile_options(${VAR_PROJECT} PUBLIC -Wno-psabi)

		#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-psabi")
	elseif(WIN32)
		set(BINARY_SUFFIX ".exe")

		target_compile_options(${VAR_PROJECT} PUBLIC /bigobj /D_WIN32_WINNT=0x0601 /wd4996 /wd4702 /utf-8)

		#string(REGEX REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
		#string(REGEX REPLACE "/MDd" "/MTd" CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")
		#string(REGEX REPLACE "/RTC1" "" CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")

		add_definitions(-D_SILENCE_ALL_MS_EXT_DEPRECATION_WARNINGS)
	endif()

	message("${VAR_PROJECT} compile flags: ${CMAKE_CXX_FLAGS}")

	set_target_properties(${VAR_PROJECT} PROPERTIES SUFFIX ${BINARY_SUFFIX})
	message("${VAR_PROJECT} extension is: ${BINARY_SUFFIX}")
endFunction()